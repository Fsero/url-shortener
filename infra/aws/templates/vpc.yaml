Conditions:
  FourAZ: !Equals
    - !FindInMap
      - NumAvailabilityZones
      - !Ref 'AWS::Region'
      - AZ
    - '4'
  ThreeAZ: !Or
    - !Equals
      - !FindInMap
        - NumAvailabilityZones
        - !Ref 'AWS::Region'
        - AZ
      - '3'
    - !Equals
      - !FindInMap
        - NumAvailabilityZones
        - !Ref 'AWS::Region'
        - AZ
      - '4'
Description: Common VPC definition for all schibsted platform technologies group
Mappings:
  NumAvailabilityZones:
    ap-northeast-1:
      AZ: '2'
    ap-southeast-1:
      AZ: '2'
    ap-southeast-2:
      AZ: '2'
    eu-central-1:
      AZ: '2'
    eu-west-1:
      AZ: '3'
    sa-east-1:
      AZ: '3'
    us-east-1:
      AZ: '4'
    us-west-1:
      AZ: '2'
    us-west-2:
      AZ: '3'
Outputs:
  InternetGateway:
    Value: !Ref 'InternetGateway'
  PrivateElbSubnet0:
    Value: !Ref 'PrivateElbSubnet0'
  PrivateElbSubnet1:
    Value: !Ref 'PrivateElbSubnet1'
  PrivateElbSubnet2:
    Value: !Ref 'PrivateElbSubnet2'
  PrivateSubnet0:
    Value: !Ref 'PrivateSubnet0'
  PrivateSubnet1:
    Value: !Ref 'PrivateSubnet1'
  PrivateSubnet2:
    Value: !Ref 'PrivateSubnet2'
  PublicElbSubnet0:
    Value: !Ref 'PublicElbSubnet0'
  PublicElbSubnet1:
    Value: !Ref 'PublicElbSubnet1'
  PublicElbSubnet2:
    Value: !Ref 'PublicElbSubnet2'
  PublicSubnet0:
    Value: !Ref 'PublicSubnet0'
  PublicSubnet1:
    Value: !Ref 'PublicSubnet1'
  PublicSubnet2:
    Value: !Ref 'PublicSubnet2'
  VpcId:
    Value: !Ref 'VPC'
Parameters:
  PrivateElbSubnetRange0:
    Default: ''
    Description: Network range for PrivateElbSubnet0
    Type: String
  PrivateElbSubnetRange1:
    Default: ''
    Description: Network range for PrivateElbSubnet1
    Type: String
  PrivateElbSubnetRange2:
    Default: ''
    Description: Network range for PrivateElbSubnet2
    Type: String
  PrivateElbSubnetRange3:
    Default: ''
    Description: Network range for PrivateElbSubnet3
    Type: String
  PrivateSubnetRange0:
    Default: ''
    Description: Network range for PrivateSubnet0
    Type: String
  PrivateSubnetRange1:
    Default: ''
    Description: Network range for PrivateSubnet1
    Type: String
  PrivateSubnetRange2:
    Default: ''
    Description: Network range for PrivateSubnet2
    Type: String
  PrivateSubnetRange3:
    Default: ''
    Description: Network range for PrivateSubnet3
    Type: String
  PublicElbSubnetRange0:
    Default: ''
    Description: Network range for PublicElbSubnet0
    Type: String
  PublicElbSubnetRange1:
    Default: ''
    Description: Network range for PublicElbSubnet1
    Type: String
  PublicElbSubnetRange2:
    Default: ''
    Description: Network range for PublicElbSubnet2
    Type: String
  PublicElbSubnetRange3:
    Default: ''
    Description: Network range for PublicElbSubnet3
    Type: String
  PublicSubnetRange0:
    Default: ''
    Description: Network range for PublicSubnet0
    Type: String
  PublicSubnetRange1:
    Default: ''
    Description: Network range for PublicSubnet1
    Type: String
  PublicSubnetRange2:
    Default: ''
    Description: Network range for PublicSubnet2
    Type: String
  PublicSubnetRange3:
    Default: ''
    Description: Network range for PublicSubnet3
    Type: String
  VpcName:
    Description: Name for the VPC
    Type: String
  VpcNetworkRange:
    Description: Network range for the VPC
    Type: String
Resources:
  NetworkAcl:
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::NetworkAcl
  GatewayToInternet:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCGatewayAttachment
  InboundPrivateSubnet0AclEntry:
    Properties:
      CidrBlock: !Ref 'PrivateSubnetRange0'
      Egress: 'false'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '110'
    Type: AWS::EC2::NetworkAclEntry
  InboundPrivateSubnet1AclEntry:
    Properties:
      CidrBlock: !Ref 'PrivateSubnetRange1'
      Egress: 'false'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '111'
    Type: AWS::EC2::NetworkAclEntry
  InboundPrivateSubnet2AclEntry:
    Properties:
      CidrBlock: !Ref 'PrivateSubnetRange2'
      Egress: 'false'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '112'
    Type: AWS::EC2::NetworkAclEntry
  InternetGateway:
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
    Type: AWS::EC2::InternetGateway
  NatGateway0:
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP0.AllocationId'
      SubnetId: !Ref 'PublicSubnet0'
    Type: AWS::EC2::NatGateway
  NatGateway1:
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::NatGateway
  NatGateway2:
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref 'PublicSubnet2'
    Type: AWS::EC2::NatGateway
  NatGatewayEIP0:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  NatGatewayEIP1:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  NatGatewayEIP2:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  OutboundPrivateSubnet0AclEntry:
    Properties:
      CidrBlock: !Ref 'PrivateSubnetRange0'
      Egress: 'true'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '110'
    Type: AWS::EC2::NetworkAclEntry
  OutboundPrivateSubnet1AclEntry:
    Properties:
      CidrBlock: !Ref 'PrivateSubnetRange1'
      Egress: 'true'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '111'
    Type: AWS::EC2::NetworkAclEntry
  OutboundPrivateSubnet2AclEntry:
    Properties:
      CidrBlock: !Ref 'PrivateSubnetRange2'
      Egress: 'true'
      NetworkAclId: !Ref 'NetworkAcl'
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '112'
    Type: AWS::EC2::NetworkAclEntry
  PrivateElbSubnet0:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PrivateElbSubnetRange0'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PrivateElbSubnet0
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"private-'
              - !Ref 'VpcName'
              - '","target":"elb"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateElbSubnet0RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable0'
      SubnetId: !Ref 'PrivateElbSubnet0'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateElbSubnet1:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PrivateElbSubnetRange1'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PrivateElbSubnet1
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"private-'
              - !Ref 'VpcName'
              - '","target":"elb"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateElbSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable1'
      SubnetId: !Ref 'PrivateElbSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateElbSubnet2:
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PrivateElbSubnetRange2'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PrivateElbSubnet2
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"private-'
              - !Ref 'VpcName'
              - '","target":"elb"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateElbSubnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable2'
      SubnetId: !Ref 'PrivateElbSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateRouteTable0:
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateRouteTable1:
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateRouteTable2:
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateSubnet0:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PrivateSubnetRange0'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PrivateSubnet0
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"private-'
              - !Ref 'VpcName'
              - '","target":"ec2"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnet0RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable0'
      SubnetId: !Ref 'PrivateSubnet0'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnet1:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PrivateSubnetRange1'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PrivateSubnet1
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"private-'
              - !Ref 'VpcName'
              - '","target":"ec2"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable1'
      SubnetId: !Ref 'PrivateSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnet2:
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PrivateSubnetRange2'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PrivateSubnet2
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"private-'
              - !Ref 'VpcName'
              - '","target":"ec2"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PrivateSubnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable2'
      SubnetId: !Ref 'PrivateSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicElbSubnet0:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PublicElbSubnetRange0'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PublicElbSubnet0
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"public-'
              - !Ref 'VpcName'
              - '","target":"elb"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicElbSubnet0RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicElbSubnet0'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicElbSubnet1:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PublicElbSubnetRange1'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PublicElbSubnet1
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"public-'
              - !Ref 'VpcName'
              - '","target":"elb"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicElbSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicElbSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicElbSubnet2:
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PublicElbSubnetRange2'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PublicElbSubnet2
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"public-'
              - !Ref 'VpcName'
              - '","target":"elb"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicElbSubnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicElbSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicRoute:
    DependsOn: GatewayToInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: AWS::EC2::Route
  PublicRouteTable:
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PublicSubnet0:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PublicSubnetRange0'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PublicSubnet0
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"public-'
              - !Ref 'VpcName'
              - '","target":"ec2"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet0RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet0'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet1:
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PublicSubnetRange1'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PublicSubnet1
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"public-'
              - !Ref 'VpcName'
              - '","target":"ec2"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet2:
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PublicSubnetRange2'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - PublicSubnet2
              - !Ref 'VpcName'
        - Key: immutable_metadata
          Value: !Join
            - ''
            - - '{"purpose":"public-'
              - !Ref 'VpcName'
              - '","target":"ec2"}'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  PublicSubnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  RouteToNatGateway0:
    DependsOn:
      - NatGateway0
      - PrivateRouteTable0
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGateway0'
      RouteTableId: !Ref 'PrivateRouteTable0'
    Type: AWS::EC2::Route
  RouteToNatGateway1:
    DependsOn:
      - NatGateway1
      - PrivateRouteTable1
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGateway1'
      RouteTableId: !Ref 'PrivateRouteTable1'
    Type: AWS::EC2::Route
  RouteToNatGateway2:
    DependsOn:
      - NatGateway2
      - PrivateRouteTable2
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref 'NatGateway2'
      RouteTableId: !Ref 'PrivateRouteTable2'
    Type: AWS::EC2::Route
  VPC:
    Properties:
      CidrBlock: !Ref 'VpcNetworkRange'
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'VpcName'
        - Key: Network
          Value: Public
    Type: AWS::EC2::VPC
